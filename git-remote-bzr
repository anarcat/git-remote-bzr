#!/usr/bin/env python
import sys
import os
import subprocess
import errno
sys.path.insert(0, os.getenv("GITPYTHONLIB","."))

from bzrlib.branch import Branch

from git_remote_helpers.util import die, debug, warn


class Bzr(object):
    def __init__(self, alias, url):
        self.alias = alias
        self.url = url
        self._branch = None

    def get_branch(self):
        """Return the branch object from bzrlib."""
        if not self._branch:
            try:
                self._branch = Branch.open(self.url)
            #FIXME: blech, catch something more precise
            except Exception, e:
                die('Could not open branch at %s : %s', self.url, e)

        return self._branch

    branch = property(fget=get_branch)


def do_capabilities(repo, args):
    """Expose the supported capabilities."""
    print "import"
    #print "fetch"
    print "push"
    #print "refspec refs/heads/*:refs/bzr/branches/*"

    print # end capabilities


def do_list(repo, args):
    """Lists all known references."""
    # Branch discovery is not implemented.
    print "? refs/heads/master"
    print "@refs/heads/master HEAD"

    print  # end list


def do_import(repo, args):
    """Import a fast-import stream that is exported from Bazaar."""
    if len(args) != 1:
        die("Import needs exactly one ref")

    marks_file = os.path.join(repo.bzrdir, "%s.bzr.marks" % repo.alias)

    cmd = ['bzr', 'fast-export', '--export-marks=%s' % marks_file]
    if os.path.exists("%s" % marks_file):
        cmd += ['--import-marks=%s' % marks_file]

    debug("Calling sub-command: %s", ' '.join(cmd))
    bzrp = subprocess.Popen(cmd + [repo.url])
    bzrp.wait()


def do_push(repo, args):
    """Send revisions to the Bazaar repository."""
    if len(args) != 1:
        die("Push needs at least one refspec")

    src, dst = args[0].split(":", 1)

    if src.startswith("refs/heads/"):
        src = src[11:]

    debug("Source: %s", src)
    debug("Destination: %s", repo.url)

    git_marks_file = os.path.join(repo.bzrdir, "%s.git.marks" % repo.alias)
    git_cmd = ["git", "fast-export", "--export-marks=%s" % git_marks_file]
    if os.path.exists(git_marks_file):
        git_cmd += ["--import-marks=%s" % git_marks_file]
    git_cmd += [src]

    bzr_marks_file = os.path.join(repo.bzrdir, "%s.bzr.marks" % repo.alias)
    bzr_cmd = ["bzr", "fast-import", "--export-marks=%s" % bzr_marks_file]
    if os.path.exists(bzr_marks_file):
        bzr_cmd += ["--import-marks=%s" % bzr_marks_file]
    bzr_cmd += ["-", repo.url]

    debug("Calling sub-command: %s", ' '.join(git_cmd))
    gitp = subprocess.Popen(git_cmd, stdout=subprocess.PIPE)
    debug("Calling sub-command: %s", ' '.join(bzr_cmd))
    bzrp = subprocess.Popen(bzr_cmd, stdin=gitp.stdout)
    bzrp.wait()

    debug("bzr fast-import return code: %d" % bzrp.returncode)
    if bzrp.returncode:
        print "error %s 'bzr fast-import returned with code %d'" % (
                dst, bzrp.returncode)
    else:
        print "ok %s" % dst

    print  # End the status report


COMMANDS = {
    'capabilities': do_capabilities,
    'list': do_list,
    'import': do_import,
    'push': do_push,
}


def sanitize(value):
    """Clean up the url."""
    if value.startswith('bzr::'):
        value = value[5:]
    return value


def read_one_line(repo):
    """Read and process one command."""
    line = sys.stdin.readline()

    cmdline = line

    if not cmdline:
        warn("Unexpected EOF")
        return False

    cmdline = cmdline.strip().split()
    if not cmdline:
        # Blank line means we're about to quit
        return False

    cmd = cmdline.pop(0)
    debug("Got command '%s' with args '%s'", cmd, ' '.join(cmdline))

    if cmd not in COMMANDS:
        die("Unknown command, %s", cmd)

    func = COMMANDS[cmd]
    func(repo, cmdline)
    sys.stdout.flush()

    return True


if __name__ == '__main__':
    args = sys.argv

    if len(args) != 3:
        die("Expecting exactly three arguments.")
        sys.exit(1)

    if os.getenv("GIT_DEBUG_BZR"):
        import git_remote_helpers.util
        git_remote_helpers.util.DEBUG = True

    debug("Got arguments %s", args[1:])

    alias = sanitize(args[1])
    url = sanitize(args[2])

    if not alias.isalnum():
        warn("non-alnum alias '%s'", alias)
        alias = "tmp"

    args[1] = alias
    args[2] = url

    repo = Bzr(alias, url)

    repo.gitdir = os.getenv('GIT_DIR')
    if not repo.gitdir:
        # According to git(1), when GIT_DIR is not set, it is cwd + '.git'
        repo.gitdir = os.path.join(os.path.realpath('.'), '.git')
    debug("Git dir: %s" % repo.gitdir)

    bzr_dir = os.path.join(repo.gitdir, "bzr")
    try:
        os.makedirs(bzr_dir)
    except OSError, e:
        # It's what we want if it already exists.
        if e.errno != errno.EEXIST:
            warn("Could not create %s, incremental history will not be used: %d %s" %
                    (e.errno, e, bzr_dir))
            repo.bzrdir = None
        else:
            repo.bzrdir = bzr_dir
    else:
        repo.bzrdir = bzr_dir
    debug("Bzr data dir: %s" % repo.bzrdir)

    more = True

    while (more):
        more = read_one_line(repo)
