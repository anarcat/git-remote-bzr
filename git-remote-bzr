#!/usr/bin/env python
import sys
import os
import subprocess
sys.path.insert(0, os.getenv("GITPYTHONLIB","."))

from bzrlib.branch import Branch

from git_remote_helpers.util import die, debug, warn


class Bzr(object):
    def __init__(self, alias, url):
        self.alias = alias
        self.url = url
        self._branch = None

    def get_branch(self):
        """Return the branch object from bzrlib."""
        if not self._branch:
            try:
                self._branch = Branch.open(self.url)
            #FIXME: blech, catch something more precise
            except Exception, e:
                die('Could not open branch at %s : %s', self.url, e)

        return self._branch

    branch = property(fget=get_branch)


def do_capabilities(repo, args):
    """Expose the supported capabilities."""
    print "import"
    #print "fetch"
    print "push"
    #print "refspec refs/heads/*:refs/bzr/branches/*"

    print # end capabilities


def do_list(repo, args):
    """Lists all known references."""
    prev_commit = repo.branch.last_revision()

    # FIXME replace by actual branch name
    print "%s refs/heads/master" % prev_commit
    print "@refs/heads/master HEAD"

    print  # end list


def do_import(repo, args):
    """Import a fast-import stream that is exported from Bazaar."""
    if len(args) != 1:
        die("Import needs exactly one ref")

    #if not repo.gitdir:
    #    die("Need gitdir to import")

    bzrp = subprocess.Popen(['bzr', 'fast-export', repo.url])
    bzrp.wait()


def do_push(repo, args):
    """Send revisions to the Bazaar repository."""
    if len(args) != 1:
        die("Push needs at least one refspec")

    debug("Push got refspec: %s", args[0])
    src, dst = args[0].split(":", 1)

    if src.startswith("refs/heads/"):
        src = src[11:]

    debug("Source: %s", src)
    debug("Destination: %s", repo.url)

    gitp = subprocess.Popen(["git", "fast-export", src], stdout=subprocess.PIPE)
    bzrp = subprocess.Popen(["bzr", "fast-import", "-", repo.url], stdin=gitp.stdout)
    bzrp.wait()
    print "error %s 'Not implemented'" % dst


COMMANDS = {
    'capabilities': do_capabilities,
    'list': do_list,
    'import': do_import,
    'push': do_push,
}


def sanitize(value):
    """Clean up the url."""
    if value.startswith('bzr::'):
        value = value[5:]
    return value


def read_one_line(repo):
    """Read and process one command."""
    line = sys.stdin.readline()

    cmdline = line

    if not cmdline:
        warn("Unexpected EOF")
        return False

    cmdline = cmdline.strip().split()
    if not cmdline:
        # Blank line means we're about to quit
        return False

    cmd = cmdline.pop(0)
    debug("Got command '%s' with args '%s'", cmd, ' '.join(cmdline))

    if cmd not in COMMANDS:
        die("Unknown command, %s", cmd)

    func = COMMANDS[cmd]
    func(repo, cmdline)
    sys.stdout.flush()

    return True


if __name__ == '__main__':
    args = sys.argv

    if len(args) != 3:
        die("Expecting exactly three arguments.")
        sys.exit(1)

    if os.getenv("GIT_DEBUG_BZR"):
        import git_remote_helpers.util
        git_remote_helpers.util.DEBUG = True

    alias = sanitize(args[1])
    url = sanitize(args[2])

    if not alias.isalnum():
        warn("non-alnum alias '%s'", alias)
        alias = "tmp"

    args[1] = alias
    args[2] = url

    debug("Got arguments %s", args[1:])

    repo = Bzr(alias, url)

    more = True

    while (more):
        more = read_one_line(repo)
